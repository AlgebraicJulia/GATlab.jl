export ThEmpty, ThSet, ThMagma, ThSemiGroup, ThMonoid, ThGroup, ThCMonoid, ThAb, ThRing,
  ThCRing, ThRig, ThCRig, ThElementary, ThPreorder

@theory ThEmpty begin
end

@theory ThSet begin
  default::TYPE
end


@theory ThMagma begin
  using ThSet
  (x ‚ãÖ y) :: default ‚ä£ [x, y]
end

@theory ThSemiGroup begin
  using ThMagma
  (x ‚ãÖ y) ‚ãÖ z == (x ‚ãÖ (y ‚ãÖ z)) ‚ä£ [x, y, z]
end

@theory ThMonoid begin
  using ThSemiGroup
  e() :: default
  e() ‚ãÖ x == x ‚ä£ [x]
  x ‚ãÖ e() == x ‚ä£ [x]
end

@theory ThGroup begin
  using ThMonoid
  i(x) :: default ‚ä£ [x]
  i(x) ‚ãÖ x == e() ‚ä£ [x]
  x ‚ãÖ i(x) == e() ‚ä£ [x]
end

# TODO if I instead write "a" and "b" for "x" and "y", I think GATlab should coerce "a" and "b" to be "x" and "y"
# it could do this by going into the args for all the axioms, determining the terms per TYPE, i.e.
# DEFAULT: [x,y,z]
@theory ThCMonoid begin
  using ThMonoid
  x ‚ãÖ y == y ‚ãÖ x ‚ä£ [x, y]
end

@theory ThAb begin
  using ThGroup
  using ThCMonoid
end

""" The theory of a semiring

A set where addition is a commutative monoid, multiplication is monoidal, and they interact through distributivity.

Examples:
  - 

"""
@theory ThSemiRing begin
  using ThCMonoid: ‚ãÖ as +, e as zero
  using ThMonoid: ‚ãÖ as *, e as one
  x * (y + z) == (x * y) + (x * y) ‚ä£ [x,y,z]
end

@theory ThRig begin
  using ThSemiRing
end

""" The theory of a ring

A set where addition is a group, multiplication is monoidal, and they interact through distributivity.

Examples:
  - 

A ring can also be obtaned by imposing additive inverses on a semiring.
"""
@theory ThRing begin
  using ThAb: ‚ãÖ as +, i as -, e as zero
  using ThMonoid: ‚ãÖ as *, e as one
  x * (y + z) == (x * y) + (x * z) ‚ä£ [x,y,z]
end

""" The theory of a ring where multiplicative is commutative.

Examples:
  - 

"""
@theory ThCRing begin
  using ThRing
  x * y == y * x ‚ä£ [x,y]
end

""" The theory of a commutative ring with multiplicative idempotence.

Examples:
  - 

"""
@theory ThBooleanRing begin
  using ThCRing
  x * x == x ‚ä£ [x]
end

""" The theory of a ring with multiplicative inverses 

 - The set of Quarternions ‚Ñç 

"""
@theory ThDivisionRing begin
  using ThRing
  i(x) :: default ‚ä£ [x]
  i(x) * x == one() ‚ä£ [x]
  x * i(x) == one() ‚ä£ [x]
end

# TODO: how to handle cases where RHS of axiom must be a different sort (e.g., nonzero) than those on the LHS (e.g., default)? Can we define a sort which inherits axioms defined on another sort (default)?
""" The theory of a commutative ring where multiplication by nonzero elements is nonzero 

 - 

"""
# @theory ThIntegralDomain begin
#   using ThCRing
#   nonzero::TYPE
#   # using ThCRing: default as nonzero
#   x * y == z ‚ä£ [x::nonzero, y::nonzero, z::nonzero]
# end

# using two theories which overlap considerably, we can still add unique elem 
""" The theory of a commutative division ring

 - The rational numbers ‚Ñö and algebraic extensions, i.e. ‚Ñö[‚àö2]
 - The real numbers ‚Ñù and its algebraic completion, the complex numbers ‚ÑÇ
 - 

"""
@theory ThField begin
  using ThDivisionRing
  using ThCRing
end


@theory ThCRig begin
  using ThRig
  a * b == b * a ‚ä£ [a,b]
end

@theory ThElementary begin
  using ThCRing
  sin(x) ‚ä£ [x]
  cos(x) ‚ä£ [x]
  tan(x) ‚ä£ [x]
  exp(x) ‚ä£ [x]
  sigmoid(x) ‚ä£ [x]
end

@theory ThPreorder <: ThSet begin
  Leq(dom, codom)::TYPE ‚ä£ [dom, codom]
  @op (‚â§) := Leq
  refl(p)::Leq(p,p) ‚ä£ [p]
  trans(f::Leq(p,q),g::Leq(q,r))::Leq(p,r)  ‚ä£ [p,q,r]
  irrev := f == g ‚ä£ [p,q, (f,g)::Leq(p,q)]
end

# @theory ThKleene begin
#   using ThPreorder
#   using ThSemiRing
#   x + x == x ‚ä£ [x]
#   ‚ãÜ(x)::default
#   1 + ‚ãÜ(x)*x ‚â§ ‚ãÜ(x) ‚ä£ [x]
#   1 + x*‚ãÜ(x) ‚â§ ‚ãÜ(x) ‚ä£ [x]


# ALGEBRA OVER TWO SETS

# using two plus signs, oops! can we overload plus signs?
@theory ThModule begin
  using ThAb: default as M, ‚ãÖ as ‚äï
  using ThRing: default as R, one as unit 
  
  (r ‚ãÖ a) :: M ‚ä£ [r::R, a::M]
  (r ‚ãÖ (a ‚äï b)) == ((r ‚ãÖ a) ‚äï (r ‚ãÖ b)) ‚ä£ [r::R, a::M, b::M]
  ((r + s) ‚ãÖ a) == ((r ‚ãÖ a) ‚äï (s ‚ãÖ a)) ‚ä£ [r::R, s::R, a::M]
  (r*s) ‚ãÖ a == r ‚ãÖ (s ‚ãÖ a) ‚ä£ [r::R, s::R, a::M]
  unit ‚ãÖ a == a ‚ä£ [unit::R, a::M]
end

@theory ThVectorSpace begin
  using ThModule
  using ThField 
end

@theory ThCommutativeRModule begin
  using ThModule
  using ThCRing: default as R, one as unit
end

## bilinear operation is given by ‚ãÖ but should be ‚äï
# @theory ThDistributiveAlgebra begin
#   using ThCommutativeRModule: M as A

#   (x + y) ‚ãÖ z == (x ‚ãÖ z) + (y ‚ãÖ z) ‚ä£ [x::A, y::A, z::A]
#   x ‚ãÖ (y + z) == (x ‚ãÖ y) + (x ‚ãÖ z) ‚ä£ [x::A, y::A, z::A]
#   (r ‚ãÖ x) ‚ãÖ (s ‚ãÖ y) == (r ‚ãÖ s) ‚ãÖ (x ‚ãÖ y) ‚ä£ [r::R, s::R, x::A, y::A]
# end

#@theory ThAlternativeAlgebra begin
#  using ThCommutativeRModule

#  x ‚ãÖ (x ‚ãÖ y) == (x ‚ãÖ x) ‚ãÖ y ‚ä£ [x::M, y::M]
#  (y ‚ãÖ x) ‚ãÖ x == y ‚ãÖ (x ‚ãÖ x) ‚ä£ [x::M, y::M]
#end

## 
#@theory ThCompositionAlgebra begin
#  using ThDistributiveAlgebra: 

#  # nondegenerate p.d. quadratic form
#  N(x) :: A ‚ä£ [x::A]
#  N(x‚ãÖy) == N(x)‚ãÖN(y) ‚ä£ [x::A, y::A]

#  x ‚üß y == N(x + y) - N(x) - N(y) ‚ä£ [x::A]
#end

#@theory ThLieAlgebra begin
#  using ThDistributiveAlgebra: A as ùî§

#  x ‚ü¶ y :: A ‚ä£ [(x,y)::ùî§]
#  (a*x + b*y) ‚ü¶ z == a ‚ãÖ (x ‚ü¶ z) + b ‚ãÖ (y ‚ü¶ z) ‚ä£ [(a,b)::K, (x,y,z)::ùî§]
#  z ‚ü¶ (a*x + b*y) == a ‚ãÖ (z ‚ü¶ x) + b ‚ãÖ (z ‚ü¶ y) ‚ä£ [(a,b)::K, (x,y,z)::ùî§]
  
#  x ‚ü¶ x == zero ‚ä£ [x::ùî§]

#  (x ‚ü¶ (y ‚ü¶ z)) + (y ‚ü¶ (z ‚ü¶ x)) + (z ‚ü¶ (x ‚ü¶ y)) == zero ‚ä£ [(x,y,z)::ùî§]
#end

## @theory ThJordanAlgebra begin
#  # using ThDistributiveAlgebra

#  # commutativity
#  # (x‚ãÖy)

#""" The theory of associative algebras

#"""
#@theory ThAlgebra begin
#  using ThDistributiveAlgebra

#  (x ‚ãÖ (y ‚ãÖ z)) == (x ‚ãÖ (y ‚ãÖ z)) ‚ä£ [x::M, y::M, z::M]
#end

#@theory ThStarAlgebra begin
#  using ThAlgebra

#  ‚Ä†(x) :: A ‚ä£ [x::A]
#  ‚Ä†(x + y) == ‚Ä†(x) + ‚Ä†(y) ‚ä£ [x::A, y::A]
#  ‚Ä†(one) == one
#  ‚Ä†(‚Ä†(x)) = x ‚ä£ [x::A]
#end
## scalars must be commutative

## what is the 1‚Çì? can we axiomatically build "co" theories?
#@theory ThCoAlgebra begin
#  using ThVectorSpace: M as V

#  Œî(x) == x ‚äó x ‚ä£ [x::V]
#  œµ(x) :: K ‚ä£ [x::V]
#  (1‚Çì ‚äó Œî(x))(Œî(x)) == (Œî ‚äó 1‚Çì)(Œî(x)) ‚ä£ [x::V]
#end


## TODO need to add compatibility conditions
#@theory ThBiAlgebra begin
#  using ThAlgebra: default as B, ‚ãÖ as ‚àá
#  using ThCoAlgebra: default as B
#end

#@theory ThHopfAlgebra begin
#  using ThBiAlgebra 

#  # need to specify what it means to be K-linear
#  S(x) :: B ‚ä£ [x::B]
#  S(k‚ãÖ x) == k‚ãÖS(x) ‚ä£ [k::K, x::B]
#  # can I omit the scalar term? can I do (k‚ÇÅ,k‚ÇÇ)::K a la Decapodes?
#  S(k‚ÇÅ‚ãÖx‚ÇÅ + k‚ÇÇ‚ãÖx‚ÇÇ) == S(k‚ÇÅ‚ãÖx‚ÇÅ) + S(k‚ÇÇ‚ãÖx‚ÇÇ) ‚ä£ [k‚ÇÅ::K,k‚ÇÇ::K,x‚ÇÅ::B,x‚ÇÇ::B]

#  # antipodal relations
#  ‚àá((S ‚äó 1‚Çì)(Œî(x))) == Œ∑(œµ(x)) ‚ä£ [x::B]
#  ‚àá((1‚Çì ‚äó S)(Œî(x))) == Œ∑(œµ(x)) ‚ä£ [x::B]
#end





## need conjugate symmetry, linearity, p.d.
#@theory ThInnerProductSpace begin
#  using ThVectorSpace: M as V

#  x ‚üß y :: K ‚ä£ [x::V, y::V]
#end

# 
